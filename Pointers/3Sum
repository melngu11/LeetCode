// Time Complexity: O(n^2) : nested loop
// Space Complexity: O(n)

class Solution {
public:
    vector<vector<int>> threeSum(vector<int>& nums) {
        vector<vector<int>> answer;
        sort(nums.begin(), nums.end());

        for (int i = 0; i < nums.size()-2; i++) {
            if (i > 0 && nums[i] == nums[i-1]){ continue;}
            int j = i+1;
            int k = nums.size()-1;

            while (j < k){
                int total = nums[i] + nums[j] + nums[k];
                
                if (total < 0){
                    j++;
                }else if(total > 0){
                    k--;
                }
                else{
                    answer.push_back({nums[i], nums[j], nums[k]});
                    j++;
                    while(j<k && nums[j] == nums[j-1]){
                        j++;
                    }
                }
            }
            
        }
    return answer;
    } 
};

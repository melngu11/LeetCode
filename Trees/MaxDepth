#include <iostream>
#include <queue>
#include <stack>
#include <algorithm>
using namespace std;

struct TreeNode {
  int val;
  TreeNode *left;
  TreeNode *right;
  TreeNode() : val(0), left(nullptr), right(nullptr) {}
  TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
  TreeNode(int x, TreeNode* left, TreeNode *right) : val(x), left(left), right(right) {}
};

int maxDepth(TreeNode* root){
  if (root == nullptr) {return 0;}
  // BFS:
  // queue<TreeNode*> q;
  // q.push(root);
  // int depth = 0;

  // while(!q.empty()){
  //   int qSize = q.size();
  //   for(int i  = 0; i < qSize; i++){
  //     TreeNode* node = q.front();
  //     q.pop();
  //     if(node->left != nullptr) {q.push(node->left);}
  //     if(node->right != nullptr) {q.push(node->right);}
  //   }
  //   depth++;
  // } 
  // return depth;
  

  // DFS:
  stack<pair<TreeNode*, int>> s;
  s.push(pair(root, 1)); 
  int depth = 0;
  while (!s.empty()){
    TreeNode* node = s.top().first;
    int curr = s.top().second;
    s.pop();
    depth = max(depth, curr);

    if(node->left != nullptr) {s.push(pair(node->left, curr+1 ));}
    if(node->right != nullptr) {s.push(pair(node->right, curr+1 ));}
   
  }
  return depth;




}


int main() {
    //Test for empty tree:
    TreeNode* root = nullptr;
    cout << "Test 1: Expected =  0 | Calcuated: " << maxDepth(root) << endl;

    //Test 2: 
    root = new TreeNode(1);
    cout << "Test 2: Expected =  1 | Calcuated: " << maxDepth(root) << endl;
    delete root;

    //Test 3:
    TreeNode* leftChild = new TreeNode(2);
    TreeNode* rightChild = new TreeNode(3);
    root = new TreeNode(1, leftChild, rightChild);
    cout << "Test 3: Expected =  2 | Calcuated: " << maxDepth(root) << endl;
    delete leftChild;
    delete rightChild;
    delete root;

    //Test 4:
    TreeNode* node4 = new TreeNode(4);
    TreeNode* node2= new TreeNode(2, node4, nullptr);
    TreeNode* node3 = new TreeNode(3);
    root = new TreeNode(1, node2, node3);
    cout << "Test 3: Expected =  3 | Calcuated: " << maxDepth(root) << endl;
    delete node2;
    delete node3;
    delete node4;
    delete root;


  return 0;
}

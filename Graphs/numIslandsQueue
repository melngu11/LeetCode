class Solution {
public:
    void visitIsland(vector<vector<char>>&grid, queue<pair<int,int>>q){
        int rows = grid.size();
        int cols = grid[0].size();

        while(!q.empty()){
            auto island = q.front();
            int i = island.first;
            int j = island.second;
            //remove island
            q.pop();
            //Add neighbors to q and sink as we visit:
            if (i+1 < rows && grid[i+1][j] == '1'){
                q.push({i+1,j});
                grid[i+1][j] = '0';
            }
            if (i-1 >= 0 && grid[i-1][j] == '1'){
                q.push({i-1,j});
                grid[i-1][j] = '0';
            }

            if (j+1 < cols && grid[i][j+1] == '1'){
                q.push({i,j+1});
                grid[i][j+1] = '0';
            }
            if (j-1 >= 0 && grid[i][j-1] == '1'){
                q.push({i,j-1});
                grid[i][j-1] = '0';
            }
        }
    }

    int numIslands(vector<vector<char>>& grid) {
        queue<pair<int,int>>q;
        int rows = grid.size();
        int cols = grid[0].size();
        int islands = 0;

        for (int i = 0; i < grid.size(); i++){
            for (int j = 0 ; j < grid[i].size(); j++){
                if (grid[i][j] == '0'){
                    continue;
                }
                q.push({i,j});
                grid[i][j] = '0';

                //visit "island":
                visitIsland(grid, q);
                islands++;
            }
        }
        return islands;
    }
};

class Solution {
public:
    void dfs(vector<vector<char>>& grid, int i, int j){
        if (i<0 || i >=grid.size() || j < 0 || j >= grid[0].size() || grid[i][j] != '1'){
            return;
        }
        grid[i][j] = '0';
        dfs(grid, i - 1 , j);
        dfs(grid, i + 1, j);
        dfs(grid, i, j - 1);
        dfs(grid, i ,j + 1 );

    }
    int numIslands(vector<vector<char>>& grid) {
        if (grid.empty()){
            return 0;
        }
         // Get dimensions of grid
        int rows = grid.size();
        int cols = grid[0].size();
        int islands = 0;
        for (int i = 0; i < rows; i ++){
            for (int j = 0; j < cols; j++){
                if(grid[i][j] == '1'){
                    dfs(grid, i,j);
                    islands++;
                }
            }
        }
        return islands;
    }
    
};

//Time complexity: O(m*n) 



// ** Bottom-up solution for embedded systems **
// Iterative approach using an explicit stack


class Solution {
public:
    void dfs(vector<vector<char>>& grid, int start_i, int start_j) {
        stack<pair<int, int>> stack;
        stack.push({start_i, start_j});

        while (!stack.empty()) {
            int i = stack.top().first;
            int j = stack.top().second;
            stack.pop();

            if (i < 0 || i >= grid.size() || j < 0 || j >= grid[0].size() || grid[i][j] != '1') {
                continue;
            }

            grid[i][j] = '0';  // Mark the cell as visited by setting it to '0'

            // Push all adjacent cells into the stack
            stack.push({i - 1, j});
            stack.push({i + 1, j});
            stack.push({i, j - 1});
            stack.push({i, j + 1});
        }
    }

    int numIslands(vector<vector<char>>& grid) {
        if (grid.empty()) {
            return 0;
        }

        int rows = grid.size();
        int cols = grid[0].size();
        int islands = 0;

        for (int i = 0; i < rows; i++) {
            for (int j = 0; j < cols; j++) {
                if (grid[i][j] == '1') {
                    dfs(grid, i, j);
                    islands++;
                }
            }
        }

        return islands;
    }
};
